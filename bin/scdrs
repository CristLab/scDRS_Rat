#!/usr/bin/env python

import fire
import pandas as pd
import numpy as np
from statsmodels.stats.multitest import multipletests
import scdrs
from typing import Dict, List
import scanpy as sc
import os
import time


VERSION = "1.0.0"


def get_cli_head():
    MASTHEAD = "******************************************************************************\n"
    MASTHEAD += "* Single-cell disease relevance score (scDRS)\n"
    MASTHEAD += "* Version %s\n" % VERSION
    MASTHEAD += "* Martin Jinye Zhang and Kangcheng Hou\n"
    MASTHEAD += "* HSPH / Broad Institute / UCLA\n"
    MASTHEAD += "* MIT License\n"
    MASTHEAD += "******************************************************************************\n"
    return MASTHEAD


def compute_score(
    h5ad_file: str,
    h5ad_species: str,
    gs_file: str,
    gs_species: str,
    out_folder: str,
    cov_file: str = None,
    ctrl_match_opt: str = "mean_var",
    weight_opt: str = "vs",
    flag_filter_data: bool = True,
    flag_raw_count: bool = True,
    n_ctrl: int = 1000,
    flag_return_ctrl_raw_score: bool = False,
    flag_return_ctrl_norm_score: bool = True,
):
    """
    Single-cell disease relevance score (scDRS)

    Parameters
    ----------
    h5ad_file : str
        Path to the h5ad file.
    h5ad_species : str
        Species of the h5ad file. one of [hsapiens, mmusculus].
    gs_file : str
        Path to the gs file.
    gs_species : str
        Species of the gs file. one of [hsapiens, mmusculus].
    out_folder : str
        Path to the output folder. Save file at <out_folder>/<trait>.score.gz
    cov_file : str, optional
        Path to the covariate file. The default is None.
    ctrl_match_opt : str, optional
        Control matching option. The default is "mean_var".
    weight_opt : str, optional
        Weighting option. The default is "vs".
    flag_filter_data : bool, optional
        Flag on whether to apply cell and gene filters to the h5ad_file data.
        Default is True.
    flag_raw_count : bool, optional
        Flag on whether to apply size factor normalization and log1p transformation.
        Default is True.
    n_ctrl : int, optional
        Number of control gene sets. The default is 1000.
    flag_return_ctrl_raw_score : bool, optional
        Flag to return raw control scores. The default is False.
    flag_return_ctrl_norm_score : bool, optional
        Flag to return the normalized control scores. The default is True.
        
    Examples
    --------
    scdrs compute-score \
        --h5ad_file <h5ad_file>\
        --h5ad_species mouse\
        --gs_file <gs_file>\
        --gs_species human\
        --out_folder <out_folder>
        --cov_file <cov_file>\
        --ctrl_match_opt "mean_var"\
        --weight_opt "vs"\
        --flag_filter_data True\
        --flag_raw_count True\
        --n_ctrl 1000\
        --flag_return_ctrl_raw_score False\
        --flag_return_ctrl_norm_score True\
    """

    sys_start_time = time.time()

    ###########################################################################################
    ######                                    Parse Options                              ######
    ###########################################################################################
    H5AD_FILE = h5ad_file
    H5AD_SPECIES = h5ad_species
    COV_FILE = cov_file
    GS_FILE = gs_file
    GS_SPECIES = gs_species
    CTRL_MATCH_OPT = ctrl_match_opt
    WEIGHT_OPT = weight_opt
    FLAG_FILTER_DATA = flag_filter_data
    FLAG_RAW_COUNT = flag_raw_count
    N_CTRL = n_ctrl
    FLAG_RETURN_CTRL_RAW_SCORE = flag_return_ctrl_raw_score
    FLAG_RETURN_CTRL_NORM_SCORE = flag_return_ctrl_norm_score
    OUT_FOLDER = out_folder

    if H5AD_SPECIES != GS_SPECIES:
        H5AD_SPECIES = scdrs.util.convert_species_name(H5AD_SPECIES)
        GS_SPECIES = scdrs.util.convert_species_name(GS_SPECIES)

    header = get_cli_head()
    header += "Call: scdrs compute-score \\\n"
    header += "--h5ad_file %s\\\n" % H5AD_FILE
    header += "--h5ad_species %s\\\n" % H5AD_SPECIES
    header += "--cov_file %s\\\n" % COV_FILE
    header += "--gs_file %s\\\n" % GS_FILE
    header += "--gs_species %s\\\n" % GS_SPECIES
    header += "--ctrl_match_opt %s\\\n" % CTRL_MATCH_OPT
    header += "--weight_opt %s\\\n" % WEIGHT_OPT
    header += "--flag_filter_data %s\\\n" % FLAG_FILTER_DATA
    header += "--flag_raw_count %s\\\n" % FLAG_RAW_COUNT
    header += "--n_ctrl %d\\\n" % N_CTRL
    header += "--flag_return_ctrl_raw_score %s\\\n" % FLAG_RETURN_CTRL_RAW_SCORE
    header += "--flag_return_ctrl_norm_score %s\\\n" % FLAG_RETURN_CTRL_NORM_SCORE
    header += "--out_folder %s\n" % OUT_FOLDER
    print(header)

    # Check options
    if H5AD_SPECIES != GS_SPECIES:
        if H5AD_SPECIES not in ["mmusculus", "hsapiens"]:
            raise ValueError(
                "--h5ad_species needs to be one of [mmusculus, hsapiens] "
                "unless --h5ad_species==--gs_species"
            )
        if GS_SPECIES not in ["mmusculus", "hsapiens"]:
            raise ValueError(
                "--gs_species needs to be one of [mmusculus, hsapiens] "
                "unless --h5ad_species==--gs_species"
            )
    if CTRL_MATCH_OPT not in ["mean", "mean_var"]:
        raise ValueError("--ctrl_match_opt needs to be one of [mean, mean_var]")
    if WEIGHT_OPT not in ["uniform", "vs", "inv_std", "od"]:
        raise ValueError("--weight_opt needs to be one of [uniform, vs, inv_std, od]")

    ###########################################################################################
    ######                                     Load data                                 ######
    ###########################################################################################
    print("Load data:")

    # Load .h5ad file
    adata = scdrs.util.load_h5ad(
        H5AD_FILE, flag_filter_data=FLAG_FILTER_DATA, flag_raw_count=FLAG_RAW_COUNT
    )

    print(
        "--h5ad_file loaded: n_cell=%d, n_gene=%d (sys_time=%0.1fs)"
        % (adata.shape[0], adata.shape[1], time.time() - sys_start_time)
    )

    # Load .cov file
    if COV_FILE is not None:
        df_cov = pd.read_csv(COV_FILE, sep="\t", index_col=0)
        print(
            "--cov_file loaded: covariates=[%s] (sys_time=%0.1fs)"
            % (", ".join(df_cov.columns), time.time() - sys_start_time)
        )
    else:
        df_cov = None

    # Load .gs file
    dict_gs = scdrs.util.load_gs(
        GS_FILE,
        src_species=GS_SPECIES,
        dst_species=H5AD_SPECIES,
        to_intersect=adata.var_names,
    )

    print(
        "--gs_file loaded: n_geneset=%d (sys_time=%0.1fs)"
        % (len(dict_gs), time.time() - sys_start_time)
    )

    ###########################################################################################
    ######                                  Computation                                  ######
    ###########################################################################################

    # Preprocess
    scdrs.preprocess(adata, cov=df_cov, n_mean_bin=20, n_var_bin=20, copy=False)

    # Compute score
    print("Compute score:")
    for trait in dict_gs:
        gene_list, gene_weights = dict_gs[trait]
        if len(gene_list) < 10:
            print(
                "trait=%s: skipped due to small size (n_gene=%d, sys_time=%0.1fs)"
                % (trait, len(gene_list), time.time() - sys_start_time)
            )
            continue

        df_res = scdrs.score_cell(
            adata,
            gene_list,
            gene_weight=gene_weights,
            ctrl_match_key=CTRL_MATCH_OPT,
            n_ctrl=N_CTRL,
            weight_opt=WEIGHT_OPT,
            return_ctrl_raw_score=FLAG_RETURN_CTRL_RAW_SCORE,
            return_ctrl_norm_score=FLAG_RETURN_CTRL_NORM_SCORE,
            verbose=False,
        )

        df_res.iloc[:, 0:6].to_csv(
            os.path.join(OUT_FOLDER, "%s.score.gz" % trait),
            sep="\t",
            index=True,
            compression="gzip",
        )
        if FLAG_RETURN_CTRL_RAW_SCORE | FLAG_RETURN_CTRL_NORM_SCORE:
            df_res.to_csv(
                os.path.join(OUT_FOLDER, "%s.full_score.gz" % trait),
                sep="\t",
                index=True,
                compression="gzip",
            )
        v_fdr = multipletests(df_res["pval"].values, method="fdr_bh")[1]
        n_rej_01 = (v_fdr < 0.1).sum()
        n_rej_02 = (v_fdr < 0.2).sum()
        print(
            "Gene set %s (n_gene=%d): %d/%d FDR<0.1 cells, %d/%d FDR<0.2 cells (sys_time=%0.1fs)"
            % (
                trait,
                len(gene_list),
                n_rej_01,
                df_res.shape[0],
                n_rej_02,
                df_res.shape[0],
                time.time() - sys_start_time,
            )
        )
    return


def munge_gs(
    out_file: str,
    pval_file: str = None,
    zscore_file: str = None,
    weight: str = "zscore",
    fdr: float = None,
    fwer: float = None,
    n_min: int = 100,
    n_max: int = 1000,
):
    """
    CLI for converting a .tsv GWAS gene statistics file to an scDRS .gs file.
    
    Input file (`pval_file` or `zscore_file`) format: 
    - .tsv file 
    - First column corresponds to gene names, preferably with header 'GENE'.
    - Each of other columns corresponds to a disease with header being the disease name
        and the values being either the gene-level p-values (`pval_file`) or
        gene-level one-sided z-scores (`zscore_file`).

    For example, `pval_file` looks like

        GENE    BMI    HEIGHT
        OR4F5   0.001  0.01
        DAZ3    0.01   0.001
        ...
    
    Main steps.
    1. Read result from a p-value or a z-score file
    2. Select a subset of disease genes for each disease:
        - If both `fdr` and `fwer` are None, select the top `n_max` genes.
        - If `fdr` is not None, select genes based on FDR and cap between `n_min` and `n_max`. 
        - If `fwer` is not None, select genes based on FWER and cap between `n_min` and `n_max`. 
    3. Assign gene weights based on `--weight`.
    4. Write the .gs file to `out_file`.
    
    Parameters
    ----------
    pval_file : str
        Path to the p-value file. One of `pval_file` and `zscore_file` is expected.
    zscore_file : str
        Path to the z-score file. One of `pval_file` and `zscore_file` is expected.
    weight : str
        Gene weight options. One of 'zscore' or 'uniform'.
    fdr : float
        FDR threshold. 
    fwer : float
        FWER threshold.
    n_min : int
        Minimum number of genes for each gene set.
    n_max : int
        Maximum number of genes for each gene set.
    out_file : str
        Path to the output .gs file.

    Examples
    --------
    scdrs munge-gs \
        --pval-file <pval_file> \
        --out_file <out> \
        --weight <weight> \
        --fdr <fdr> \
        --fwer <fwer> \
        --n-min <n_min> \
        --n-max <n_max>
    """

    # Check inputs and print header
    header = get_cli_head()
    header += "Call: scdrs munge-gs \\\n"

    assert (
        sum([(pval_file is not None), (zscore_file is not None)]) == 1
    ), "One of --pval-file and --zscore-file is expected."
    if pval_file is not None:
        header += "--pval-file %s\\\n" % pval_file
    if zscore_file is not None:
        header += "--zscore-file %s\\\n" % zscore_file

    assert weight in [
        "zscore",
        "uniform",
    ], "--weight needs to be one of 'zscore', 'uniform'"
    header += "--weight %s\\\n" % weight

    assert (fdr is None) or (
        fwer is None
    ), "At most one of --fdr and --fwer is allowed."
    if fdr is not None:
        header += "--fdr %s\\\n" % fdr
    if fwer is not None:
        header += "--fwer %s\\\n" % fdr

    n_min = min(n_min, n_max)
    header += "--n-min %s\\\n" % n_min
    header += "--n-max %s\\\n" % n_max

    assert out_file is not None, "--out-file is expected."
    header += "--out-file %s\n" % out_file
    print(header)

    # Read file and convert to p-values
    if pval_file is not None:
        df_pval = pd.read_csv(pval_file, sep="\t")

    if zscore_file is not None:
        df_zscore = pd.read_csv(zscore_file, sep="\t")
        df_pval = df_zscore.copy()
        for col in df_pval.columns[1:]:
            df_pval[col] = scdrs.util.zsc2pval(df_zscore[col])

    gene_col = df_pval.columns[0]
    trait_list = list(df_pval.columns[1:])

    dict_gene_weights = {"TRAIT": [], "GENESET": []}
    for trait in trait_list:
        # Drop missing p-values
        df_trait_pval = df_pval[[gene_col, trait]].copy()
        df_trait_pval.dropna(axis=0, inplace=True)

        # Determine number of disease genes
        if fdr is not None:
            n_gene = multipletests(
                df_trait_pval[trait].values, alpha=fdr, method="fdr_bh"
            )[0].sum()
        elif fwer is not None:
            n_gene = multipletests(
                df_trait_pval[trait].values, alpha=fwer, method="bonferroni"
            )[0].sum()
        else:
            # If both are None, select top n_max genes
            n_gene = n_max

        # Restrict `n_gene` to be between `n_min` and `n_max`
        n_gene = min(n_gene, n_max)
        n_gene = max(n_gene, n_min)

        # Select `n_gene` genes with the smallest p-values
        df_trait_pval.sort_values(trait, inplace=True)
        df_trait_pval = df_trait_pval.iloc[:n_gene].reset_index(drop=True)

        gene_list = df_trait_pval[gene_col].values
        gene_pvals = df_trait_pval[trait].values.clip(min=1e-100)

        if weight == "zscore":
            gene_weights = scdrs.util.pval2zsc(gene_pvals).clip(max=10)
        if weight == "uniform":
            gene_weights = np.ones(len(gene_list))

        dict_gene_weights["TRAIT"].append(trait)
        dict_gene_weights["GENESET"].append(
            ",".join([f"{g}:{w:.5g}" for g, w in zip(gene_list, gene_weights)])
        )
    df_gs = pd.DataFrame(dict_gene_weights)
    df_gs.to_csv(out_file, sep="\t", index=False)
    return


def perform_downstream(
    h5ad_file: str,
    score_file: str,
    out_folder: str,
    group_analysis: str = None,
    corr_analysis: str = None,
    gene_analysis: str = None,
    flag_filter_data: bool = True,
    flag_raw_count: bool = True,
):
    """
    CLI for downstream analysis using precomputed scDRS scores. 
    
    `scdrs perform-downstream` supports 3 types of analyses:
    
    --group_analysis: for a given cell-group-level annotation (e.g., tissue or cell type), assess cell 
        group-disease association (control-score-based MC tests using 5% quantile) and within-cell
        group disease-association heterogeneity (control-score-based MC tests using Geary's C).
        
    --corr_analysis: for a given individual cell-level annotation (e.g., T cell effectorness gradient),
        assess association between disease and the individual cell-level variable (control-score-based 
        MC tests using Pearson's correlation).
    
    --gene_analysis: compute correlation between each gene and the scDRS disease score. 

    Parameters
    ----------
    h5ad_file: str
        Path to the h5ad file.
    score_file: str
        Path to scDRS `.full_score.gz` file. Use '@' to specify multiple file names,
        e.g., `score_file_path/@.full_score.gz`. However, `score_file_path` should
        not contain '@'.
    out_folder: str
        Path to the output folder. 
    group_analysis: str
        Comma-seperated column names for variables in `adata.obs.columns` representing 
        cell-group-level annotations (e.g., cell types or tissues).
    corr_analysis: str
        Comma-seperated column names for variables in `adata.obs.columns` representing variables of
        interest (e.g., age, sex) to correlate with scDRS scores. 
    gene_analysis: str
        Flag to perform the gene prioritization by correlating gene expression with scDRS
        scores. No parameters are needed. Specify by `--gene-analysis`.
    flag_filter_data: bool
        Flag on whether to apply cell and gene filters to the h5ad_file data.
        Default is True.
    flag_raw_count: bool
        Flag on whether to apply size factor normalization and log1p transformation.
        Default is True.
        
    Examples
    --------
    scdrs perform-downstream \
        --h5ad-file <h5ad_file>\
        --score-file <score_file>\
        --out-folder <out_folder>\
        --cell-type cell_type \
        --cell-variable causal_variable,non_causal_variable,covariate\
        --gene-analysis\
        --flag-filter-data True\
        --flag-raw-count True
    """
    
    sys_start_time = time.time()
    
    ###########################################################################################
    ######                                    Parse Options                              ######
    ###########################################################################################
    header = get_cli_head()
    header += "Call: scdrs perform-downstream \\\n"
    
    assert h5ad_file is not None, "--h5ad-file is expected."
    header += "--h5ad-file %s\\\n" % h5ad_file

    assert score_file is not None, "--score-file is expected."
    header += "--score-file %s\\\n" % score_file

    assert out_folder is not None, "--out-folder is expected."
    header += "--out-folder %s\\\n" % out_folder

    assert (
        sum(
            [
                group_analysis is not None,
                corr_analysis is not None,
                gene_analysis is not None,
            ]
        )
        > 0
    ), "Expect at least one of `--group_analysis`, `--corr_analysis`, `--gene_analyis`"
    if group_analysis is not None:
        # Determine if string or list_like using duck-typing
        input_type = scdrs.util.str_or_list_like(group_analysis)
        if input_type=='str':
            group_analysis = group_analysis.split(",")
        elif input_type=='list_like':
            group_analysis = list(group_analysis)
        else:
            raise ValueError("Expect --group_analysis to be a comma-separated string.")
        # group_analysis header
        header += "--group-analysis %s\\\n" % ','.join(group_analysis)
    if corr_analysis is not None:
        # Determine if string or list_like using duck-typing
        input_type = scdrs.util.str_or_list_like(corr_analysis)
        if input_type=='str':
            corr_analysis = corr_analysis.split(",")
        elif input_type=='list_like':
            corr_analysis = list(corr_analysis)
        else:
            raise ValueError("Expect --corr_analysis to be a comma-separated string.")
        # corr_analysis header
        header += "--corr-analysis %s\\\n" % ','.join(corr_analysis)
    if gene_analysis is not None:
        header += "--gene-analysis %s\\\n" % gene_analysis
        
    header += "--flag-filter-data %s\\\n" % flag_filter_data
    header += "--flag-raw-count %s\\\n" % flag_raw_count
    print(header)

    ###########################################################################################
    ######                                     Load data                                 ######
    ###########################################################################################
    adata = scdrs.util.load_h5ad(
        h5ad_file=h5ad_file,
        flag_filter_data=flag_filter_data,
        flag_raw_count=flag_raw_count,
    )
    print(
        "--h5ad-file loaded: n_cell=%d, n_gene=%d (sys_time=%0.1fs)"
        % (adata.shape[0], adata.shape[1], time.time() - sys_start_time)
    )
    
    dict_df_score = scdrs.util.load_scdrs_score(score_file)
    print(
        "--score-file loaded: n_trait=%d (sys_time=%0.1fs)"
        % (len(dict_df_score), time.time() - sys_start_time)
    )
    
    ###########################################################################################
    ######                                  Computation                                  ######
    ###########################################################################################
    if group_analysis is not None:
        for trait in dict_df_score:
            dict_df_res = scdrs.method.downstream_group_analysis(
                adata=adata, df_drs=dict_df_score[trait], group_cols=group_analysis
            )
            for group_col in group_analysis:
                dict_df_res[group_col].to_csv(
                    os.path.join(
                        out_folder,
                        f"{trait}.scdrs_ct.{group_col.replace(' ', '_')}",
                    ),
                    sep="\t",
                    index=True,
                )

    if corr_analysis is not None:
        for trait in dict_df_score:
            df_res = scdrs.method.downstream_corr_analysis(
                adata=adata, df_drs=dict_df_score[trait], var_cols=corr_analysis
            )
            df_res.to_csv(
                os.path.join(out_folder, f"{trait}.scdrs_var"), sep="\t", index=True
            )

    if gene_analysis is not None:
        for trait in dict_df_score:
            df_res = scdrs.method.downstream_gene_analysis(
                adata=adata, df_drs=dict_df_score[trait]
            )
            # save results
            df_res.to_csv(
                os.path.join(out_folder, f"{trait}.scdrs_gene"), sep="\t", index=True
            )

    return


if __name__ == "__main__":
    fire.Fire()
